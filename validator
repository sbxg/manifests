#! /usr/bin/env python3

import os
import re
import sys
import subprocess
from urllib.parse import urlparse
import xml.etree.ElementTree as ET
from lxml import etree

def check_urls(xml):
    root = ET.fromstring(xml)
    remotes = root.findall("remote")
    projetcs = root.findall("project")
    url = None
    for project in projetcs:
        rem = project.attrib["remote"]
        for r in remotes:
            if r.attrib["name"] == rem:
                url = "{0}/{1}".format(r.attrib["fetch"], project.attrib["name"])
                subprocess.check_call(["git", "ls-remote", "--quiet", "--heads", url],
                                      stdout=subprocess.DEVNULL,
                                      stderr=subprocess.DEVNULL)
                break

def validate(xml, dtd):
    """
        Tests an input XML file against an XML Document Type Declaration

        :param xml: the XML file to test
        :param dtd: the DTD to check against
        :returns: True if the file is valid, False otherwise
    """
    print("Checking {0}... ".format(xml), end="")

    with open(xml, 'r') as filp:
        contents = filp.read()

    # FIXME This is very simple. It does not handle complex cases
    # where the schema is split in several lines.
    try:
        contents_sub = re.sub(r'<\?xml.*\?>', '', contents)
    except RuntimeError:
        print("INVALID (no xml header detected)")
        return False

    # Check for basic syntax
    try:
        root = etree.XML(contents_sub)
    except etree.XMLSyntaxError as exp:
        print("INVALID (syntax error)")
        print(exp, file=sys.stderr)
        return False

    # Validate accourding to DTD
    ok = dtd.validate(root)
    if ok is False:
        print("FAIL!")
        print(dtd.error_log.filter_from_errors(), file=sys.stderr)
    else:
        try:
            ok = check_urls(contents)
            print("ok".format(xml))
        except subprocess.CalledProcessError:
            print("FAIL! (unreachable)")
            ok = False

    return ok


# Document Type Declaration of manifests
dtd = etree.DTD("manifest.dtd")

# Return status of the program
ret = 0

# For each manifest in this repository
for root, dirs, files in os.walk('.'):
    if ".git" in root: # Skip .git/ directory
        continue
    for f in files:
        _, ext = os.path.splitext(f)
        if ext == ".xml":
            # If we fail to validate the manifest, the return status
            # of the program will be equal to the count of all failed
            # manifests
            if validate("{0}/{1}".format(root, f), dtd) is False:
                ret += 1

sys.exit(ret)
